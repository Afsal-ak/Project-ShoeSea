<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <style>
        .form-container { margin-top: 20px; }
        .error-message { color: red; }
        .thumbnails-container { display: flex; flex-wrap: wrap; gap: 10px; }
        .thumbnail { position: relative; }
        .thumbnail img { max-width: 200px; max-height: 150px; }
        .image-preview { max-width: 300px; max-height: 200px; margin-top: 10px; }
        .crop-container { display: none; margin-top: 10px; }
        .delete-image-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            font-size: 12px;
            cursor: pointer;
        }
        .size-row {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        .size-row input {
            margin-right: 10px;
        }
        .delete-size-btn {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <%- include('../../partials/admin/header') %>

    <div class="container form-container">
        <div class="row">
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-body">
                        <% if (message.length > 0) { %>
                                <h6 style="color: red; text-align: center;"> <%= message.join('<br>') %> </h6> <!-- Display each error message -->
                        <% } %>
                        <form id="productForm" method="post" action="/admin/edit-product/<%= product._id %>" enctype="multipart/form-data">
                            <!-- Product Name -->
                            <div class="mb-4">
                                <label for="title" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control border" id="title" value="<%= product.productName %>">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <!-- Description -->
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="description" name="description" class="form-control border" rows="4"><%= product.description %></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="mb-4">
                                <label for="brand" class="form-label">Brand</label>
                                <input type="text" placeholder="Brand Name" name="brand" class="form-control border" id="brand" value="<%= product.brand %>">
                                <div id="brand-error" class="error-message"></div>
                            </div>
                            

                            <!-- Prices and Quantity -->
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text" class="form-control border" value="<%= product.regularPrice %>">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border" value="<%= product.salePrice %>">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                               
                            </div>

                            <!-- Color -->
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border" value="<%= product.colour %>">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Category -->
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" style="width: 150px;" name="categoryId">
                                                <% cat.forEach(category => { %>
                                                    <option value="<%= category._id %>" <%= product.categoryId.toString() === category._id.toString() ? 'selected' : '' %>><%= category.categoryName %></option>
                                                <% }); %>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Discount Type -->
                            <div class="mb-4">
                                <label class="form-label">Discount Type</label>
                                <select class="form-select border" name="discountType">
                                    <option value="">Select discount type</option>
                                    <option value="percentage" <%= product.discountType === 'percentage' ? 'selected' : '' %>>Percentage</option>
                                    <option value="flat" <%= product.discountType === 'flat' ? 'selected' : '' %>>Flat</option>
                                </select>
                                <div id="discountType-error" class="error-message"></div>
                            </div>

                            <!-- Discount Value -->
                            <div class="mb-4">
                                <label class="form-label">Discount Value</label>
                                <input placeholder="Discount Value" name="productOffer" type="text" class="form-control border" value="<%= product.productOffer %>">
                                <div id="discountValue-error" class="error-message"></div>
                            </div>

                            <!-- Tax Type -->
                            <div class="mb-4">
                                <label class="form-label">Tax Type</label>
                                <select class="form-select border" name="taxType">
                                    <option value="">Select tax type</option>
                                    <option value="percentage" <%= product.taxType === 'percentage' ? 'selected' : '' %>>Percentage</option>
                                    <option value="flat" <%= product.taxType === 'flat' ? 'selected' : '' %>>Flat</option>
                                </select>
                                <div id="taxType-error" class="error-message"></div>
                            </div>

                            <!-- Tax Value -->
                            <div class="mb-4">
                                <label class="form-label">Tax Value</label>
                                <input placeholder="Tax Value" name="taxValue" type="text" class="form-control border" value="<%= product.tax %>">
                                <div id="taxValue-error" class="error-message"></div>
                            </div>

                            <!-- Offer Description -->
                            <div class="mb-4">
                                <label class="form-label">Offer Description</label>
                                <textarea placeholder="Offer Description" name="offerDescription" class="form-control border" rows="2"><%= product.offerDescription %></textarea>
                            </div>

                            
    <!-- Sizes -->
    <div class="mb-4">
        <label class="form-label">Sizes</label>
        <div id="sizesContainer">
            <% product.sizes.forEach((size, index) => { %>
                <div class="size-row" data-index="<%= index %>">
                    <input type="number" name="sizes[<%= index %>][size]" class="form-control border" value="<%= size.size %>" placeholder="Size" >
                    <input type="number" name="sizes[<%= index %>][quantity]" class="form-control border" value="<%= size.quantity %>" placeholder="Quantity">
                    <button type="button" class="delete-size-btn">Delete</button>
                </div>
            <% }); %>
        </div>
        <button type="button" class="btn btn-primary" id="addSizeButton">Add Size</button>
        <div id="sizes-error" class="error-message"></div>
    </div> 

                             <!-- Sizes -->
                             <!-- <div class="mb-4">
                                <label class="form-label">Sizes</label>
                                <div id="sizesContainer">
                                    <% product.sizes.forEach((size, index) => { %>
                                        <div class="size-row mb-2">
                                            <input type="number" name="sizes[<%= index %>][size]" class="form-control border" value="<%= size.size %>" placeholder="Size">
                                            <input type="number" name="sizes[<%= index %>][quantity]" class="form-control border" value="<%= size.quantity %>" placeholder="Quantity">
                                        </div>
                                    <% }); %>
                                </div>
                                <button type="button" class="btn btn-primary" id="addSizeButton">Add Size</button>
                                <div id="sizes-error" class="error-message"></div>
                            </div> -->


                            <h3>Current Images</h3>
                            <div class="image-gallery" id="imageGallery">
                                <% product.productImages.forEach((image, index) => { %>
                                    <div class="image-item" id="image-<%= index %>">
                                        <img src="/<%= image %>" alt="Product Image" style="width: 100px; height: auto;">
                                        <button type="button" class="btn btn-danger btn-sm delete-image" data-image="<%= image %>" data-index="<%= index %>">Delete</button>
                                    </div>
                                <% }); %>
                            </div>
                            
                            

                            <!-- New Image Upload -->
                            <!-- <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Upload New Images</h4>
                                </div>
                                <div class="card-body">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                    <% for(let i = 1; i <= 4; i++) { %>
                                        <div class="image-input-container">
                                            <input class="form-control" type="file" name="images" id="input<%= i %>" accept="image/*" onchange="handleImageSelect(event, <%= i %>)">
                                            <img src="" alt="" id="imgView<%= i %>" class="image-preview">
                                            <div class="crop-container" id="cropContainer<%= i %>">
                                                <img src="" id="croppedImg<%= i %>" alt="">
                                                <button type="button" id="saveButton<%= i %>" class="btn btn-primary mt-2">Save Cropped Image</button>
                                            </div>
                                        </div>
                                    <% } %>
                                    <div id="images-error" class="error-message"></div>
                                </div>
                            </div> -->
                            <div class="card mb-4 mt-4">
                                <div class="card-header">
                                    <h4>Edit Images</h4>
                                </div>
                                <div class="card-body">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                    <% for(let i = 1; i <= 4; i++) { %>
                                        <div class="image-input-container">
                                            <input class="form-control" type="file" name="images" id="input<%= i %>" accept="image/*" onchange="handleImageSelect(event, <%= i %>)">
                                            <img src="" alt="" id="imgView<%= i %>" class="image-preview" style="display: block;"> <!-- Show original -->
                                            <div class="crop-container" id="cropContainer<%= i %>" style="display:none;">
                                                <img src="" id="croppedImg<%= i %>" alt="Cropped Image" style="display:none; max-width: 200px;"> <!-- Initially hide cropped image -->
                                                <button type="button" id="saveButton<%= i %>" class="btn btn-primary mt-2">Save Cropped Image</button>
                                            </div>
                                        </div>
                                    <% } %>
                                    <div id="images-error" class="error-message"></div>
                                </div>
                            </div>
                            

                            <button type="submit" class="btn btn-primary">Update Product</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
    
        let croppers = [];

function handleImageSelect(event, index) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const imgView = document.getElementById(`imgView${index}`);
            imgView.src = e.target.result; // Set the original image source

            // Destroy previous cropper instance if it exists
            if (croppers[index]) {
                croppers[index].destroy();
            }

            // Initialize Cropper.js for the image
            croppers[index] = new Cropper(imgView, {
                aspectRatio: 1, // Square cropping ratio
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 1,
                zoomable: true
            });

            // Display the cropping container
            const cropContainer = document.getElementById(`cropContainer${index}`);
            cropContainer.style.display = 'block';

            // Handle the 'Save Cropped Image' button
            const saveButton = document.getElementById(`saveButton${index}`);
            saveButton.onclick = function () {
                const croppedCanvas = croppers[index].getCroppedCanvas();
                const croppedImage = document.getElementById(`croppedImg${index}`);
                croppedImage.src = croppedCanvas.toDataURL('image/png'); // Display cropped image

                // Show the cropped image preview
                croppedImage.style.display = 'block'; // Show cropped image

                // Store the cropped image in a hidden input field or FormData
                croppedCanvas.toBlob((blob) => {
                    const input = document.getElementById(`input${index}`);
                    const fileName = `cropped-img-${new Date().getTime()}-${index}.png`;
                    const file = new File([blob], fileName, { type: 'image/png' });

                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    input.files = dataTransfer.files; // Set the cropped file to the input
                });

                // Clean up the cropper instance
                croppers[index].destroy();
                croppers[index] = null; // Set the cropper instance to null
            };
        };
        reader.readAsDataURL(file); // Read the file and trigger onload
    }
}

    document.addEventListener('DOMContentLoaded', function() {
        const deleteButtons = document.querySelectorAll('.delete-image');
        
        deleteButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                const imageUrl = this.getAttribute('data-image');
                const index = this.getAttribute('data-index');
                
                // Check how many images are left
                const remainingImages = document.querySelectorAll('.image-item').length;

                // If there's only one image left, alert the user
                if (remainingImages === 1) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Cannot delete',
                        text: 'At least one image must remain for the product.',
                        confirmButtonText: 'Okay'
                    });
                    return; // Exit the function
                }

                // If more than one image, ask for confirmation before deleting
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you want to delete this image?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        deleteImage('<%= product._id %>', imageUrl, index); // Call the function to delete the image
                    }
                });
            });
        });
    });

    function deleteImage(productId, imageUrl, index) {
        axios.post(`/admin/edit-product/${productId}/delete-image`, { imageUrl })
            .then(response => {
                if (response.data.success) {
                    const imageElement = document.getElementById(`image-${index}`);
                    if (imageElement) {
                        imageElement.remove(); // Remove the image element from the DOM
                        Swal.fire({
                            icon: 'success',
                            title: 'Deleted!',
                            text: 'The image has been deleted successfully.',
                            confirmButtonText: 'Okay'
                        });
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to delete the image.',
                        confirmButtonText: 'Okay'
                    });
                }
            })
            .catch(error => {
                console.error('Error deleting image:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while deleting the image.',
                    confirmButtonText: 'Okay'
                });
            });
    }


document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('productForm');

    form.addEventListener('submit', function(event) {
        let isValid = true;
        const errorMessages = {};

        // Validate regular price
        const regularPrice = document.getElementsByName('regularPrice')[0];
        if (regularPrice.value < 0) {
            isValid = false;
            errorMessages.regularPrice = 'Regular price cannot be negative.';
        }

        // Validate sale price
        const salePrice = document.getElementsByName('salePrice')[0];
        if (salePrice.value !== '' && parseFloat(salePrice.value) < 0) {
            isValid = false;
            errorMessages.salePrice = 'Sale price cannot be negative.';
        }

        // Validate discount value
        const discountValue = document.getElementsByName('productOffer')[0];
        const discountType = document.getElementsByName('discountType')[0];
        if (discountValue.value !== '' && parseFloat(discountValue.value) < 0) {
            isValid = false;
            errorMessages.discountValue = 'Discount value cannot be negative.';
        }
        if (discountType.value === 'percentage' && parseFloat(discountValue.value) > 100) {
            isValid = false;
            errorMessages.discountValue = 'Percentage discount cannot exceed 100%.';
        }

        // Validate tax value
        const taxValue = document.getElementsByName('taxValue')[0];
        const taxType = document.getElementsByName('taxType')[0];
        if (taxValue.value !== '' && parseFloat(taxValue.value) < 0) {
            isValid = false;
            errorMessages.taxValue = 'Tax value cannot be negative.';
        }
        if (taxType.value === 'percentage' && parseFloat(taxValue.value) > 100) {
            isValid = false;
            errorMessages.taxValue = 'Percentage tax cannot exceed 100%.';
        }

        // Validate sizes
        const sizeInputs = document.querySelectorAll('input[name^="sizes"]');
        sizeInputs.forEach(input => {
            if (input.value < 0) {
                isValid = false;
                errorMessages.sizes = 'Size and quantity values cannot be negative.';
            }
        });

        // Display error messages
        Object.keys(errorMessages).forEach(key => {
            const errorElement = document.getElementById(`${key}-error`);
            if (errorElement) {
                errorElement.textContent = errorMessages[key];
            }
        });

        if (!isValid) {
            event.preventDefault(); // Prevent form submission if validation fails
        }
    });

    // // Add size button functionality
    // let sizeIndex = document.querySelectorAll('.size-row').length;
    // document.getElementById('addSizeButton').addEventListener('click', function() {
    //     const sizesContainer = document.getElementById('sizesContainer');
    //     const newSizeRow = document.createElement('div');
    //     newSizeRow.className = 'size-row mb-2';
    //     newSizeRow.innerHTML = `
    //         <input type="number" name="sizes[${sizeIndex}][size]" class="form-control border" placeholder="Size" min="1" required>
    //         <input type="number" name="sizes[${sizeIndex}][quantity]" class="form-control border" placeholder="Quantity" min="0" required>
    //     `;
    //     sizesContainer.appendChild(newSizeRow);
    //     sizeIndex++;
    // });
    
    
});
document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('productForm');
            const sizesContainer = document.getElementById('sizesContainer');
            let sizeIndex = <%= product.sizes.length %>;

            // Function to add new size row
            function addSizeRow() {
                const newSizeRow = document.createElement('div');
                newSizeRow.className = 'size-row';
                newSizeRow.setAttribute('data-index', sizeIndex);
                newSizeRow.innerHTML = `
                    <input type="number" name="sizes[${sizeIndex}][size]" class="form-control border" placeholder="Size" min="1" required>
                    <input type="number" name="sizes[${sizeIndex}][quantity]" class="form-control border" placeholder="Quantity" min="0" required>
                    <button type="button" class="delete-size-btn">Delete</button>
                `;
                sizesContainer.appendChild(newSizeRow);
                sizeIndex++;
            }

            // Add size button functionality
            document.getElementById('addSizeButton').addEventListener('click', addSizeRow);

            // Delete size row functionality
            sizesContainer.addEventListener('click', function(event) {
                if (event.target.classList.contains('delete-size-btn')) {
                    const sizeRow = event.target.closest('.size-row');
                    if (sizesContainer.children.length > 1) {
                        sizeRow.remove();
                        updateSizeIndexes();
                    } else {
                        alert('You must have at least one size for the product.');
                    }
                }
            });

            // Function to update indexes after deletion
            function updateSizeIndexes() {
                const sizeRows = sizesContainer.querySelectorAll('.size-row');
                sizeRows.forEach((row, index) => {
                    row.setAttribute('data-index', index);
                    row.querySelectorAll('input').forEach(input => {
                        const nameAttr = input.getAttribute('name');
                        input.setAttribute('name', nameAttr.replace(/\d+/, index));
                    });
                });
                sizeIndex = sizeRows.length;
            }})

//         let sizeIndex = <%= product.sizes.length %>; // Track the current index for dynamic sizes

// document.getElementById('addSizeButton').addEventListener('click', function() {
//     const sizesContainer = document.getElementById('sizesContainer');
//     const newSizeRow = document.createElement('div');
//     newSizeRow.className = 'size-row mb-2';
//     newSizeRow.innerHTML = `
//         <input type="text" name="sizes[${sizeIndex}][size]" class="form-control border" placeholder="Size">
//         <input type="number" name="sizes[${sizeIndex}][quantity]" class="form-control border" placeholder="Quantity" min="0">
//     `;
//     sizesContainer.appendChild(newSizeRow);
    
//     // Increment the size index to ensure each new size gets a unique name attribute
//     sizeIndex++;
// });


    </script>
</body>
</html>