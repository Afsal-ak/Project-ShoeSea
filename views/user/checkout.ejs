<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        /* ... (Keep the existing styles) ... */
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        h2, h3, h4 {
            color: #2c3e50;
        }

        .checkout-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        .checkout-section {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        table th, table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        table th {
            background-color: #f8f8f8;
            font-weight: bold;
        }

        input[type="text"], input[type="email"], input[type="number"], select, textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #3498db;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: #2980b9;
        }

        .btn-secondary {
            background-color: #95a5a6;
        }

        .btn-secondary:hover {
            background-color: #7f8c8d;
        }

        .address-card {
            border: 1px solid #ddd;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 8px;
            position: relative;
        }

        .address-card h4 {
            margin: 0;
            font-weight: bold;
        }

        .address-card p {
            margin: 5px 0;
        }

        .address-actions {
            margin-top: 10px;
        }

        .edit-btn, .delete-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
        }

        .edit-btn {
            background-color: #f39c12;
            color: #fff;
        }

        .edit-btn:hover {
            background-color: #e67e22;
        }

        .delete-btn {
            background-color: #c0392b;
            color: #fff;
        }

        .delete-btn:hover {
            background-color: #e74c3c;
        }

        .coupon-section input[type="text"] {
            width: 70%;
            display: inline-block;
        }

        .coupon-section .btn {
            width: 28%;
        }

        .success {
            color: #27ae60;
            font-weight: bold;
        }

        .error {
            color: #c0392b;
            font-weight: bold;
        }

        .payment-options label {
            display: block;
            margin-bottom: 10px;
        }

        @media (max-width: 768px) {
            .checkout-grid {
                grid-template-columns: 1fr;
            }
        }
        
        .address-card.selected {
            border-color: #3498db;
            background-color: #ebf5fb;
        }

        .address-card input[type="radio"] {
            margin-right: 10px;
        }

        .add-address-btn {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #2ecc71;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-align: center;
            margin-bottom: 20px;
        }

        .add-address-btn:hover {
            background-color: #27ae60;
        }

        #addressForm {
            display: none;
        }
        .coupon-link {
        display: inline-block;
        margin-bottom: 15px;
        background-color: #f37254; /* Matches the Razorpay color theme */
        color: white;
        padding: 8px 12px;
        border-radius: 5px;
        text-decoration: none;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }

    /* Hover effect for the coupon link */
    .coupon-link:hover {
        background-color: #c94b30; /* Darker shade on hover */
    }
    </style>
</head>
<body>
    <%- include('../partials/user/header') %>

    <div class="container">
        <h2><i class="fas fa-shopping-cart"></i> Checkout</h2>
<!-- Coupon Link -->
<a href="/coupons" class="coupon-link">see coupons</a>
<div class="checkout-grid">
            <div class="checkout-section">
                <h3><i class="fas fa-map-marker-alt"></i> Shipping Address</h3>

                <!-- Add Address Button -->
                <button class="add-address-btn" onclick="toggleAddressForm()">
                    <i class="fas fa-plus"></i> Add New Address
                </button>

                <!-- Address Form for Adding New Address -->
                <form id="addressForm" action="/add-address" method="POST">
                    <input type="text" name="fname" placeholder="First Name" required>
                    <input type="text" name="lname" placeholder="Last Name" required>
                    <input type="text" name="housename" placeholder="House Name/Number" required>
                    <input type="text" name="city" placeholder="City" required>
                    <input type="text" name="state" placeholder="State" required>
                    <input type="text" name="country" placeholder="Country" required>
                    <input type="number" name="pincode" placeholder="Pincode" required>
                    <input type="number" name="phone" placeholder="Phone" required>
                    <button type="submit" class="btn">Save Address</button>
                </form>

                <!-- Existing Addresses -->
                <% if (userAddress && userAddress.length > 0) { %>
                    <% userAddress.forEach((address, index) => { %>
                        <div class="address-card">
                            <input type="radio" name="selectedAddress" value="<%= address._id %>" onchange="updateSelectedAddress(this.value)">
                            <h4><%= address.fname %> <%= address.lname %></h4>
                            <p><%= address.housename %>, <%= address.city %>, <%= address.state %>, <%= address.country %> - <%= address.pincode %></p>
                            <p>Phone: <%= address.phone %></p>
                            <div class="address-actions">
                                <button class="edit-btn" onclick="window.location.href='/edit-address/<%= address._id %>'">Edit</button>
                                <button class="delete-btn" onclick="window.location.href='/delete-address/<%= address._id %>'">Delete</button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>No addresses found. Please add a new address.</p>
                <% } %>
            </div>
            <div class="checkout-section">
                <h3><i class="fas fa-file-invoice-dollar"></i> Order Summary</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (userCart.cart && userCart.cart.length > 0) { %>
                            <% userCart.cart.forEach(item => { %>
                                <tr>
                                    <td><%= item.productId.productName %></td>
                                    <td><%= item.quantity %></td>
                                    <td>₹<%= item.productId.salePrice.toFixed(2) %></td>
                                    <td>₹<%= (item.productId.salePrice * item.quantity).toFixed(2) %></td>
                                </tr>
                            <% }); %>
                            <tr>
                                <td colspan="3">Total</td>
                                <td>₹<%= coupon ? coupon.cartTotal.toFixed(2) : userCart.cart.reduce((total, item) => total + (item.productId.salePrice * item.quantity), 0).toFixed(2) %></td>
                            </tr>
                            <% if (coupon) { %>
                                <tr>
                                    <td colspan="3">Coupon Discount</td>
                                    <td>-₹<%= coupon.discountAmount.toFixed(2) %></td>
                                </tr>
                                <tr>
                                    <td colspan="3"><strong>New Total</strong></td>
                                    <td><strong>₹<%= coupon.discountedTotal.toFixed(2) %></strong></td>
                                </tr>
                            <% } %>
                        <% } else { %>
                            <tr>
                                <td colspan="4">Your cart is empty.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
            
            
                <div class="coupon-section">
                    <h4><i class="fas fa-tag"></i> Have a Coupon?</h4>
                    <% if (!coupon) { %>
                        <form action="/apply-coupon" method="POST">
                            <input type="text" name="couponCode" placeholder="Enter coupon code" required>
                            <button type="submit" class="btn">Apply</button>
                        </form>
                    <% } else { %>
                        <p class="success">Coupon "<%= coupon.code %>" applied! Discount: ₹<%= coupon.discountAmount.toFixed(2) %></p>
                        <form action="/remove-coupon" method="POST">
                            <button type="submit" class="btn btn-secondary">Remove Coupon</button>
                        </form>
                    <% } %>
                    <% if (error_msg) { %>
                        <p class="error"><%= error_msg %></p>
                    <% } %>
                </div>

                <div class="payment-method">
                    <h4><i class="fas fa-credit-card"></i> Select Payment Method</h4>
                    <form id="checkoutForm" method="POST" onsubmit="return validateAddressSelection()">
                        <div class="payment-options">
                            <label>
                                <input type="radio" name="paymentMethod" value="Cash on Delivery" checked>
                                Cash on Delivery
                            </label>
                            <label>
                                <input type="radio" name="paymentMethod" value="Razorpay">
                                Online Payment
                            </label>
                        </div>
                    
                        <input type="hidden" name="userId" value="<%= user._id %>">
                        <input type="hidden" name="totalAmount" value="<%= totalAmount - (coupon ? coupon.offerPrice : 0) %>">
                        <input type="hidden" name="totalQuantity" value="<%= userCart.cart.reduce((sum, item) => sum + item.quantity, 0) %>">
                        <input type="hidden" name="addressId" id="selectedAddressId" value="">
                    
                        <button type="submit" class="btn">Place Order</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <%- include('../partials/user/footer') %>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function toggleAddressForm() {
            const form = document.getElementById('addressForm');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        }
    
        function updateSelectedAddress(addressId) {
            document.getElementById('selectedAddressId').value = addressId;
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });
            document.querySelector(`input[value="${addressId}"]`).closest('.address-card').classList.add('selected');
        }
    
        function validateAddressSelection() {
            const selectedAddressId = document.getElementById('selectedAddressId').value;
            const availableAddresses = document.querySelectorAll('.address-card input[type="radio"]');
    
            if (!selectedAddressId && availableAddresses.length > 0) {
                // Automatically select the first address if none is selected
                availableAddresses[0].checked = true;
                updateSelectedAddress(availableAddresses[0].value);
            } else if (availableAddresses.length === 0) {
                // Show SweetAlert if no addresses are available
                Swal.fire({
                    title: 'No Address Found',
                    text: 'Please add a shipping address to proceed.',
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
                return false;
            }
    
            const form = document.getElementById('checkoutForm');
            const paymentMethod = form.querySelector('input[name="paymentMethod"]:checked').value;
    
            if (paymentMethod === 'Cash on Delivery') {
                form.action = '/checkout/cod';
            } else if (paymentMethod === 'Razorpay') {
                form.action = '#';
                handleRazorpayPayment(form.querySelector('input[name="totalAmount"]').value);
                return false;
            }
    
            return true;
        }
    
        async function handleRazorpayPayment(totalAmount) {
            try {
                const response = await fetch('/create-razorpay-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ totalAmount })
                });
                const data = await response.json();
    
                if (!data.success) {
                    throw new Error(data.message || 'Failed to create Razorpay order');
                }
    
                const options = {
                    key: data.key,
                    amount: data.amount,
                    currency: data.currency,
                    name: 'shoesea',
                    description: 'Order Payment',
                    order_id: data.order_id,
                    handler: async function (response) {
                        try {
                            const verifyResponse = await fetch('/verify-razorpay-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });
                            const verifyData = await verifyResponse.json();
    
                            if (!verifyData.success) {
                                throw new Error(verifyData.message || 'Payment verification failed');
                            }
    
                            const checkoutResponse = await fetch('/checkout/online-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    addressId: document.getElementById('selectedAddressId').value
                                })
                            });
                            const checkoutData = await checkoutResponse.json();
    
                            if (checkoutData.success) {
                                window.location.href = `/order-success?orderId=${checkoutData.orderId}`;
                            } else {
                                throw new Error(checkoutData.message || 'Checkout process failed');
                            }
                        } catch (error) {
                            console.error('Error processing payment:', error);
                            alert('Payment failed: ' + error.message);
                        }
                    },
                    prefill: {
                        name: 'Customer Name',
                        email: 'customer@example.com',
                        contact: '9999999999'
                    },
                    theme: {
                        color: '#F37254'
                    }
                };
    
                const paymentObject = new Razorpay(options);
                paymentObject.open();
            } catch (error) {
                console.error('Error initializing Razorpay:', error);
                alert('Failed to initiate payment: ' + error.message);
            }
        }
    </script>
    
</body>
</html>
