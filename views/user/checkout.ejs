<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        /* ... (Keep the existing styles) ... */
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        h2, h3, h4 {
            color: #2c3e50;
        }

        .checkout-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        .checkout-section {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        table th, table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        table th {
            background-color: #f8f8f8;
            font-weight: bold;
        }

        input[type="text"], input[type="email"], input[type="number"], select, textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #3498db;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: #2980b9;
        }

        .btn-secondary {
            background-color: #95a5a6;
        }

        .btn-secondary:hover {
            background-color: #7f8c8d;
        }

        .address-card {
            border: 1px solid #ddd;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 8px;
            position: relative;
        }

        .address-card h4 {
            margin: 0;
            font-weight: bold;
        }

        .address-card p {
            margin: 5px 0;
        }

        .address-actions {
            margin-top: 10px;
        }

        .edit-btn, .delete-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
        }

        .edit-btn {
            background-color: #f39c12;
            color: #fff;
        }

        .edit-btn:hover {
            background-color: #e67e22;
        }

        .delete-btn {
            background-color: #c0392b;
            color: #fff;
        }

        .delete-btn:hover {
            background-color: #e74c3c;
        }

        .coupon-section input[type="text"] {
            width: 70%;
            display: inline-block;
        }

        .coupon-section .btn {
            width: 28%;
        }

        .success {
            color: #27ae60;
            font-weight: bold;
        }

        .error {
            color: #c0392b;
            font-weight: bold;
        }

        .payment-options label {
            display: block;
            margin-bottom: 10px;
        }

        @media (max-width: 768px) {
            .checkout-grid {
                grid-template-columns: 1fr;
            }
        }
        
        .address-card.selected {
            border-color: #3498db;
            background-color: #ebf5fb;
        }

        .address-card input[type="radio"] {
            margin-right: 10px;
        }

        .add-address-btn {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #2ecc71;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-align: center;
            margin-bottom: 20px;
        }

        .add-address-btn:hover {
            background-color: #27ae60;
        }

        #addressForm {
            display: none;
        }
      
        .coupon-section {
    background-color: #f8f9fa; /* Light background for the coupon section */
    padding: 20px; /* Inner spacing */
    border-radius: 8px; /* Rounded corners */
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    margin-bottom: 20px; /* Space below the section */
}

.coupon-section h4 {
    margin-bottom: 15px; /* Space below the heading */
    font-size: 1.5em; /* Larger font size */
    color: #343a40; /* Dark color for text */
    display: flex; /* Flexbox for icon alignment */
    align-items: center; /* Center icon and text vertically */
}

.coupon-section i {
    margin-right: 10px; /* Space between icon and text */
}

.coupon-form {
    display: flex; /* Flex layout for the form */
    gap: 10px; /* Space between input and button */
}

.coupon-form input {
    flex: 1; /* Input takes remaining space */
    padding: 10px; /* Inner spacing */
    border: 1px solid #ced4da; /* Border color */
    border-radius: 4px; /* Rounded corners */
}

.coupon-form .btn {
    background-color: #28a745; /* Green button */
    color: white; /* White text */
    border: none; /* Remove border */
    padding: 10px 20px; /* Inner spacing */
    border-radius: 4px; /* Rounded corners */
    cursor: pointer; /* Pointer cursor on hover */
    transition: background-color 0.3s; /* Transition effect */
}

.coupon-form .btn:hover {
    background-color: #218838; /* Darker green on hover */
}

.applied-coupon {
    background-color: #e2ffe2; /* Light green background */
    padding: 15px; /* Inner spacing */
    border-radius: 4px; /* Rounded corners */
    margin-top: 10px; /* Space above */
}

.applied-coupon .success {
    margin: 0; /* Remove default margin */
    color: #155724; /* Dark green color */
}

.remove-coupon-form {
    margin-top: 10px; /* Space above the remove button */
}

.remove-coupon-form .btn-secondary {
    background-color: #dc3545; /* Red button */
    padding: 10px 20px; /* Inner spacing */
}

.remove-coupon-form .btn-secondary:hover {
    background-color: #c82333; /* Darker red on hover */
}

.error {
    color: #dc3545; /* Red color for error messages */
    margin-top: 10px; /* Space above error message */
}

.coupon-container {
    margin-top: 20px; /* Space above coupon container */
}

.coupon-container h1 {
    font-size: 1.8em; /* Larger font size for heading */
    color: #2c3e50; /* Dark color */
    margin-bottom: 15px; /* Space below the heading */
}

table {
    width: 100%; /* Full width */
    border-collapse: collapse; /* Collapse borders */
    margin-top: 10px; /* Space above table */
}

table th, table td {
    padding: 12px; /* Inner spacing */
    text-align: left; /* Left-align text */
    border-bottom: 1px solid #ddd; /* Bottom border */
}

table th {
    background-color: #f8f8f8; /* Light background for header */
    font-weight: bold; /* Bold text */
}

table tr:hover {
    background-color: #f1f1f1; /* Highlight row on hover */
}

@media (max-width: 768px) {
    .coupon-form {
        flex-direction: column; /* Stack input and button on smaller screens */
    }

    .coupon-form input {
        margin-bottom: 10px; /* Space below input */
    }
}

.error {
    color: #dc3545; /* Red color for error messages */
    margin-top: 10px; /* Space above error message */
}
.payment-method {
    background-color: #ffffff; /* White background for contrast */
    padding: 20px; /* Inner spacing */
    border-radius: 8px; /* Rounded corners */
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    margin-top: 20px; /* Space above */
}

.payment-logo {
    display: block; /* Center logo */
    margin: 0 auto 15px; /* Center and space below */
    width: 150px; /* Set a width for the logo */
}

.payment-method h4 {
    margin-bottom: 15px; /* Space below the heading */
    font-size: 1.5em; /* Larger font size */
    color: #343a40; /* Dark color for text */
    display: flex; /* Flexbox for icon alignment */
    align-items: center; /* Center icon and text vertically */
}

.payment-method i {
    margin-right: 10px; /* Space between icon and text */
}

.payment-options {
    margin-bottom: 20px; /* Space below the payment options */
}

.payment-options label {
    display: flex; /* Flex layout for radio buttons */
    align-items: center; /* Center radio button with text */
    margin-bottom: 10px; /* Space between options */
    font-size: 1.1em; /* Slightly larger font */
    color: #495057; /* Darker text color */
}

.payment-options input[type="radio"] {
    margin-right: 10px; /* Space between radio and label */
    accent-color: #28a745; /* Custom radio button color */
}

.btn {
    background-color: #28a745; /* Green button */
    color: white; /* White text */
    border: none; /* Remove border */
    padding: 10px 20px; /* Inner spacing */
    border-radius: 4px; /* Rounded corners */
    cursor: pointer; /* Pointer cursor on hover */
    transition: background-color 0.3s; /* Transition effect */
    display: block; /* Full-width button */
    width: 100%; /* Full width */
}

.btn:hover {
    background-color: #218838; /* Darker green on hover */
}
.wallet-section {
    max-width: 400px; /* Limit the width of the wallet section */
    margin: 20px auto; /* Center the wallet section */
    padding: 20px; /* Add padding for aesthetics */
    border: 1px solid #ddd; /* Light border for the container */
    border-radius: 8px; /* Rounded corners */
    background-color: #f9f9f9; /* Light background color */
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    text-align: center; /* Center-align text */
}

.wallet-header {
    display: flex; /* Use flexbox for header alignment */
    align-items: center; /* Center items vertically */
    justify-content: center; /* Center items horizontally */
    margin-bottom: 15px; /* Space below the header */
}

.wallet-icon {
    width: 40px; /* Set icon width */
    height: 40px; /* Set icon height */
    margin-right: 10px; /* Space between icon and title */
}

.wallet-balance {
    font-size: 24px; /* Larger font for balance */
    font-weight: bold; /* Bold font for emphasis */
    color: #333; /* Darker color for balance text */
    margin-bottom: 15px; /* Space below the balance */
}

.use-wallet {
    display: flex; /* Use flexbox for alignment */
    align-items: center; /* Center items vertically */
    justify-content: center; /* Center items horizontally */
}

.use-wallet input[type="checkbox"] {
    margin-right: 8px; /* Space between checkbox and label */
}

.use-wallet label {
    font-size: 16px; /* Font size for the label */
    color: #555; /* Color for the label text */
}
/* Responsive table container */
.table-responsive {
    overflow-x: auto;
}

/* Style adjustments for smaller screens */
@media (max-width: 768px) {
    .cart-table thead {
        display: none;
    }

    .cart-table, .cart-table tbody, .cart-table tr, .cart-table td {
        display: block;
        width: 100%;
    }

    .cart-table tr {
        margin-bottom: 1rem;
        border-bottom: 1px solid #ddd;
        padding-bottom: 1rem;
    }

    .cart-table td {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
        text-align: right;
    }

    .cart-table td::before {
        content: attr(data-label);
        flex: 1;
        text-align: left;
        font-weight: bold;
        color: #333;
    }

    .cart-table .product-info {
        flex-direction: column;
        align-items: flex-start;
    }

    .product-img {
        max-width: 100px;
        height: auto;
    }
}

    </style>
</head>
<body>
    <%- include('../partials/user/header') %>

    <div class="container">
        <h2><i class="fas fa-shopping-cart"></i> Checkout</h2>
 
        <div class="checkout-grid">
            <div class="checkout-section">
                <h3><i class="fas fa-map-marker-alt"></i> Shipping Address</h3>

                <!-- Add Address Button -->
                <button class="add-address-btn" onclick="toggleAddressForm()">
                    <i class="fas fa-plus"></i> Add New Address
                </button>

                <!-- Address Form for Adding New Address -->
                <form id="addressForm" action="/add-address" method="POST">
                    <input type="text" name="fname" placeholder="First Name" required>
                    <input type="text" name="lname" placeholder="Last Name" required>
                    <input type="text" name="housename" placeholder="House Name/Number" required>
                    <input type="text" name="city" placeholder="City" required>
                    <input type="text" name="state" placeholder="State" required>
                    <input type="text" name="country" placeholder="Country" required>
                    <input type="number" name="pincode" placeholder="Pincode" required>
                    <input type="number" name="phone" placeholder="Phone Number" required>

                    <button style="background-color: #007bff; color: white;" type="submit" class="btn">Save Address</button>
                </form>

                <!-- Existing Addresses -->
                <% if (userAddress && userAddress.length > 0) { %>
                    <% userAddress.forEach((address, index) => { %>
                        <div class="address-card">
                            <input type="radio" name="selectedAddress" value="<%= address._id %>" onchange="updateSelectedAddress(this.value)">
                            <h4><%= address.fname %> <%= address.lname %></h4>
                            <p><%= address.housename %>, <%= address.city %>, <%= address.state %>, <%= address.country %> - <%= address.pincode %></p>
                            <p>Phone: <%= address.phone %></p>
                            <div class="address-actions">
                                <button class="edit-btn" onclick="window.location.href='/edit-address/<%= address._id %>'">Edit</button>
                                <button class="delete-btn" onclick="window.location.href='/delete-address/<%= address._id %>'">Delete</button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>No addresses found. Please add a new address.</p>
                <% } %>
            </div>
            <div class="checkout-section">
                <h3><i class="fas fa-file-invoice-dollar"></i> Order Summary</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (userCart.cart && userCart.cart.length > 0) { %>
                            <% userCart.cart.forEach(item => { %>
                                <tr>
                                    <td><%= item.productId.productName %></td>
                                    <td><%= item.quantity %></td>
                                    <td>₹<%= item.productId.salePrice.toFixed(2) %></td>
                                    <td>₹<%= (item.productId.salePrice * item.quantity).toFixed(2) %></td>
                                </tr>
                            <% }); %>
                            <tr>
                                <td colspan="3">Total</td>
                                <td>₹<%= coupon ? coupon.cartTotal.toFixed(2) : userCart.cart.reduce((total, item) => total + (item.productId.salePrice * item.quantity), 0).toFixed(2) %></td>
                            </tr>
                            <% if (coupon) { %>
                                <tr>
                                    <td colspan="3">Coupon Discount</td>
                                    <td>-₹<%= coupon.discountAmount.toFixed(2) %></td>
                                </tr>
                                <tr>
                                    <td colspan="3"><strong>New Total</strong></td>
                                    <td><strong>₹<%= coupon.discountedTotal.toFixed(2) %></strong></td>
                                </tr>
                            <% } %>
                        <% } else { %>
                            <tr>
                                <td colspan="4">Your cart is empty.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
            
            <div class="coupon-section">
                <h4><i class="fas fa-tag"></i> Have a Coupon?</h4>
                <% if (!coupon) { %>
                    <form action="/apply-coupon" method="POST" class="coupon-form">
                        <input type="text" name="couponCode" placeholder="Enter coupon code" required>
                        <button type="submit" class="btn">Apply</button>
                    </form>
                <% } else { %>
                    <div class="applied-coupon">
                        <p class="success">Coupon "<%= coupon.code %>" applied! Discount: ₹<%= coupon.discountAmount.toFixed(2) %></p>
                        <form action="/remove-coupon" method="POST" class="remove-coupon-form">
                            <button type="submit" class="btn btn-secondary">Remove Coupon</button>
                        </form>
                    </div>
                <% } %>
                <% if (error_msg) { %>
                    <p class="error"><%= error_msg %></p>
                <% } %>
            </div>
            <div class="coupon-container">
                <h1>Available Coupons</h1>
                <% if (coupons.length > 0) { %>
                    <table>
                        <thead>
                            <tr>
                                <th>Coupon Name</th>
                                <th>Discount</th>
                                <th>Minimum Purchase</th>
                                <th>Expires On</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% coupons.forEach(coupon => { %> <!-- Fixed variable name from 'coupons' to 'coupon' -->
                                <tr>
                                    <td><%= coupon.name %></td>
                                    <td>
                                        <% if (coupon.discountType === 'percentage') { %>
                                            <%= coupon.offerPrice %>% off
                                        <% } else { %>
                                            ₹<%= coupon.offerPrice.toFixed(2) %> off
                                        <% } %>
                                    </td>
                                    <td>₹<%= coupon.minimumPrice.toFixed(2) %></td>
                                    <td><%= coupon.expirationDate.toDateString() %></td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                <% } else { %>
                    <p>No coupons available at the moment. Please check back later!</p>
                <% } %>
            </div>
        
            <div class="payment-method">
                <% if (error) { %>
                    <p class="error"><%= error %></p>
                <% } %>
                <h4><i class="fas fa-credit-card"></i> Select Payment Method</h4>
                <form id="checkoutForm" method="POST" onsubmit="return validateAddressSelection()">
                    <div class="payment-options">
                        <label>
                            <input type="radio" name="paymentMethod" value="Cash on Delivery" checked>
                            Cash on Delivery
                        </label>
                        <label>
                            <input type="radio" name="paymentMethod" value="Razorpay">
                            Online Payment
                        </label>
                        <label>
                            <input type="radio" name="paymentMethod" value="Wallet">
                            Wallet Payment (₹<%= user.walletBalance %>)
                        </label>
                    </div>
            
                    <!-- Optional: Show wallet balance section if you need more details -->
                    <div id="walletBalanceSection" style="display: none; margin-top: 10px;">
                        <input type="checkbox" id="useWallet" name="useWallet" value="1">
                        <label for="useWallet">Use Wallet Balance</label>
                    </div>
            
             
            
                    <input type="hidden" name="userId" value="<%= user._id %>">
                    <input type="hidden" name="totalAmount" value="<%= totalAmount - (coupon ? coupon.offerPrice : 0) %>">
                    <input type="hidden" name="totalQuantity" value="<%= userCart.cart.reduce((sum, item) => sum + item.quantity, 0) %>">
                    <input type="hidden" name="addressId" id="selectedAddressId" value="">
            
                    <button type="submit" class="btn" style="background-color: #007bff;color: white; padding: 10px 20px; border: none; border-radius: 5px; font-size: 16px; font-weight: 600;  cursor: pointer;">Place Order</button>
                </form>
            </div>
            
            </div>
        </div>
    </div>
    
    <%- include('../partials/user/footer') %>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function toggleAddressForm() {
            const form = document.getElementById('addressForm');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        }
    
        function updateSelectedAddress(addressId) {
            document.getElementById('selectedAddressId').value = addressId;
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });
            document.querySelector(`input[value="${addressId}"]`).closest('.address-card').classList.add('selected');
        }
    
        function validateAddressSelection() {
            const selectedAddressId = document.getElementById('selectedAddressId').value;
            const availableAddresses = document.querySelectorAll('.address-card input[type="radio"]');
    
            if (!selectedAddressId && availableAddresses.length > 0) {
                // Automatically select the first address if none is selected
                availableAddresses[0].checked = true;
                updateSelectedAddress(availableAddresses[0].value);
            } else if (availableAddresses.length === 0) {
                // Show SweetAlert if no addresses are available
                Swal.fire({
                    title: 'No Address Found',
                    text: 'Please add a shipping address to proceed.',
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
                return false;
            }
    
            const form = document.getElementById('checkoutForm');
            const paymentMethod = form.querySelector('input[name="paymentMethod"]:checked').value;
    
            if (paymentMethod === 'Cash on Delivery') {
                form.action = '/checkout/cod';
            } else if (paymentMethod === 'Razorpay') {
                form.action = '#';
                handleRazorpayPayment(form.querySelector('input[name="totalAmount"]').value);
                return false;
            }else if (paymentMethod === 'Wallet') {
                form.action = '/checkout/Wallet';
              
            }
    
            return true;
        }
 
async function handleRazorpayPayment(totalAmount) {
    try {
        const response = await fetch('/create-razorpay-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ totalAmount })
        });
        const data = await response.json();

        if (!data.success) {
            throw new Error(data.message || 'Failed to create Razorpay order');
        }

        // Store the order_id outside the handler
        let savedOrderId = data.order_id;

        const options = {
            key: data.key,
            amount: data.amount,
            currency: data.currency,
            name: 'shoesea',
            description: 'Order Payment',
            order_id: savedOrderId, // Save it here
            handler: async function (response) {
                try {
                    const verifyResponse = await fetch('/verify-razorpay-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature
                        })
                    });
                    const verifyData = await verifyResponse.json();

                    const checkoutResponse = await fetch('/checkout/online-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                            addressId: document.getElementById('selectedAddressId').value
                        })
                    });
                    const checkoutData = await checkoutResponse.json();

                    if (checkoutData.success) {
                        window.location.href = `/order-success?orderId=${checkoutData.orderId}`;
                    } else {
                        window.location.href = `/payment-failed?orderId=${checkoutData.orderId}`;
                    }
                } catch (error) {
                    console.error('Error processing payment:', error);
                    alert('Payment failed: ' + error.message);
                    window.location.href = '/payment-failed';
                }
            },
            modal: {
                ondismiss: async function() {
                    console.log('Payment modal closed');
                    try {
                        // Use the saved order_id here
                        const checkoutResponse = await fetch('/checkout/failed-payment', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                razorpay_order_id: savedOrderId, // Use the saved value
                                addressId: document.getElementById('selectedAddressId').value
                            })
                        });
                        const checkoutData = await checkoutResponse.json();
                        window.location.href = `/payment-failed?orderId=${checkoutData.orderId}`;
                    } catch (error) {
                        console.error('Error handling payment cancellation:', error);
                        window.location.href = `/payment-failed?orderId=${checkoutData.orderId}`;
                    }
                }
            },
            prefill: {
                name: 'Customer Name',
                email: 'customer@example.com',
                contact: '9999999999'
            },
            theme: {
                color: '#F37254'
            }
        };

        const paymentObject = new Razorpay(options);
        paymentObject.open();
    } catch (error) {
        console.error('Error initializing Razorpay:', error);
        alert('Failed to initiate payment: ' + error.message);
    }
}

    </script>
    
</body>
</html>
